<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.concox.app.basicdata.mapper.PriceGroupPjDetailsMapper">
    <resultMap type="PriceGroupPjDetails" id="PriceGroupPjDetails">
	</resultMap>

    <sql id="selectAllFields">
        SELECT id, groupId, pjlId, proNO, proName, proSpeci, retailPrice, consumption, masterOrSlave
        FROM t_sale_grouppj_details_price
    </sql>
    
    <select id="getPriceGroupPjDetailsList" parameterType="PriceGroupPjDetails" resultType="PriceGroupPjDetails">
		<include refid="selectAllFields" />
		<where>
			<choose>
				<when test="po.groupId != null and po.groupId != 0">
					and groupId = #{po.groupId}
				</when>
				<otherwise>
					and groupId is null
				</otherwise>
			</choose>
			<if test="po.proNO != null and po.proNO != ''"> and proNO like concat('%', '${po.proNO}', '%') </if>
			<if test="po.proName != null and po.proName != ''"> and proName like concat('%', '${po.proName}', '%') </if>
			<if test="po.tempIds != null and po.tempIds != '' "> and pjlId IN (${po.tempIds}) </if>
		</where>
		order by groupId,proNO
	</select>
	
    <select id="getPriceGroupPjDetailsListByGroupId" parameterType="Integer" resultType="PriceGroupPjDetails">
		<include refid="selectAllFields" />
		where groupId = #{groupId}
	</select>
	
	  <select id="getPriceGroupPjDetailsListByProNOAndMasterOrSlave" parameterType="Integer" resultType="PriceGroupPjDetails">
		<include refid="selectAllFields" />
		where proNO = #{proNO} AND masterOrSlave = #{masterOrSlave}
	</select>
    
    <insert id="insert" parameterType="PriceGroupPjDetails">
        INSERT INTO t_sale_grouppj_details_price (id,
        	groupId,
           	pjlId, 
            proNO, proName, proSpeci, retailPrice, consumption, masterOrSlave
        ) VALUES (#{id},
        	#{groupId},
            #{pjlId}, 
            (select proNO from t_sale_pjlmanage where pjlId = #{pjlId}),
            (select proName from t_sale_pjlmanage where pjlId = #{pjlId}),
            (select proSpeci from t_sale_pjlmanage where pjlId = #{pjlId}),
            IFNULL((select retailPrice from t_sale_pjlmanage where pjlId = #{pjlId}),0),
            (select consumption from t_sale_pjlmanage where pjlId = #{pjlId}),
            (select masterOrSlave from t_sale_pjlmanage where pjlId = #{pjlId})
        )
	</insert>
    
    <select id="getPriceByGroupId" parameterType="Integer" resultType="BigDecimal">
		SELECT sum(retailPrice*consumption) from t_sale_grouppj_details_price
		<where>
			<choose>
				<when test="groupId != null and groupId != 0">
					and groupId = #{groupId}
				</when>
				<otherwise>
					and groupId is null
				</otherwise>
			</choose>
		</where>
	</select>
    

    <update id="update" parameterType="PriceGroupPjDetails">
        UPDATE t_sale_grouppj_details_price
        <set>
            <if test="groupId != null"> groupId = #{groupId}, </if>
            <if test="retailPrice != null"> retailPrice = #{retailPrice}, </if>
            <if test="consumption != null"> consumption = #{consumption}, </if>
        </set>
        WHERE id = #{id}
    </update>
    
     <update id="updateGroupIdByIds" parameterType="String">
        UPDATE t_sale_grouppj_details_price
        <set>
            <if test="groupId != null"> groupId = #{groupId}, </if>
        </set>
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
    </update>

    <delete id="delete">
        DELETE FROM t_sale_grouppj_details_price WHERE id = #{id}
    </delete>
    
     <delete id="deleteByGroupId" parameterType="Integer">
        DELETE FROM t_sale_grouppj_details_price WHERE groupId = #{groupId}
    </delete>
    
     <delete id="deleteInfo" parameterType="String">
        DELETE FROM t_sale_grouppj_details_price
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    
     <delete id="deleteInfoIsNull" parameterType="Integer">
        DELETE FROM t_sale_grouppj_details_price 
        <where>
	        <choose>
		        <when test="groupId != null and groupId !=0">
		        	AND groupId = #{groupId}
		        </when>
		        <otherwise>
		       		 AND groupId is Null
		        </otherwise>
	        </choose>
        </where>
    </delete>

    <select id="getT" parameterType="String" resultType="PriceGroupPjDetails">
        <include refid="selectAllFields" />
        WHERE id = #{id}
    </select>
    
    <!-- 维修报价选择组合是获取配件料 -->
    <select id="getPjlByGroupIds" parameterType="String" resultType="PriceGroupPjDetails">
         SELECT groupId, pjlId, proNO, proName FROM t_sale_grouppj_details_price 
         WHERE groupId IN 
         <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    
    <!-- 根据报价配件料组合id、配件料编码判断是否是同一数据 -->
	<select id="isExists" parameterType="Pjlmanage" resultType="int">
		SELECT count(1) FROM t_sale_grouppj_details_price
		WHERE groupId = #{groupId} AND proNO = #{proNO}
		<if test="id !=null"> AND id != #{id} </if>
	</select>
	
	<!-- 新增时看是否重复  -->
	<select id="findCountForGroupPj" parameterType="String" resultType="int">
		SELECT count(pjlId) FROM t_sale_grouppj_details_price
		<where>
			<choose>
				<when test="groupId != null">groupId = #{groupId} AND FIND_IN_SET(#{id}, t_sale_grouppj_details_price.pjlId)</when>
				<otherwise>1 = 0</otherwise>
			</choose>
		</where>
	</select>
	
	 <!-- 该组合下所有物料 -->
	<select id="getPjlIdsByGroupId" parameterType="Integer" resultType="String">
		SELECT GROUP_CONCAT(pjlId) FROM t_sale_grouppj_details_price WHERE groupId = #{groupId}
	</select>
</mapper>